From 05e0d9a06f4bcc0fbd581cad206158a4fda15a43 Mon Sep 17 00:00:00 2001
From: CullanP <cullanpage@gmail.com>
Date: Thu, 3 Mar 2016 02:13:38 -0600
Subject: [PATCH] Avoid hopper searches if there are no items

Hoppers searching for items and minecarts is the most expensive part of hopper ticking.
We keep track of the number of minecarts and items in a chunk.
If there are no items in the chunk, we skip searching for items.
If there are no minecarts in the chunk, we skip searching for them.

Usually hoppers aren't near items, so we can skip most item searches.
And since minecart hoppers are used _very_ rarely near we can avoid alot of searching there.

Combined, this adds up a lot.

diff --git a/src/main/java/net/minecraft/world/chunk/Chunk.java b/src/main/java/net/minecraft/world/chunk/Chunk.java
index ffb2af0..c534cc2 100644
--- a/src/main/java/net/minecraft/world/chunk/Chunk.java
+++ b/src/main/java/net/minecraft/world/chunk/Chunk.java
@@ -107,6 +107,11 @@ public class Chunk {
     public org.bukkit.Chunk bukkitChunk;
     public boolean mustSave;
     public final PaperLightingQueue.LightingQueue lightingQueue = new PaperLightingQueue.LightingQueue(this); // Paper
+    
+    // Paper start - Track the number of minecarts and items - Keep in sync with entityList additions and removals
+    private final int[] itemCounts = new int[16];
+    private final int[] inventoryEntityCounts = new int[16];
+    // Paper end
 
     public boolean areNeighborsLoaded(int radius) {
         switch (radius) {
@@ -675,6 +680,13 @@ public class Chunk {
         entityIn.chunkCoordY = k;
         entityIn.chunkCoordZ = this.zPosition;
         this.entityLists[k].add(entityIn);
+        // Paper start - Update count
+        if (entityIn instanceof net.minecraft.entity.item.EntityItem) {
+            itemCounts[k]++;
+        } else if (entityIn instanceof net.minecraft.inventory.IInventory) {
+            inventoryEntityCounts[k]++;
+        }
+        // Paper end
 
         if (entityIn instanceof EntityLiving) {
             EntityLiving entityinsentient = (EntityLiving)entityIn;
@@ -711,6 +723,13 @@ public class Chunk {
         }
 
         this.entityLists[index].remove(entityIn);
+        // Paper start - Update count
+        if (entityIn instanceof net.minecraft.entity.item.EntityItem) {
+            itemCounts[index]--;
+        } else if (entityIn instanceof net.minecraft.inventory.IInventory) {
+            inventoryEntityCounts[index]--;
+        }
+        // Paper end
 
         if (entityIn instanceof EntityLiving) {
             EntityLiving entityinsentient = (EntityLiving)entityIn;
@@ -884,6 +903,15 @@ public class Chunk {
 
         for (int k = i; k <= j; ++k) {
             if (!this.entityLists[k].isEmpty()) {
+                // Paper start - Don't search for inventories if we have none, and that is all we want
+                /*
+                * We check if they want inventories by seeing if it is the static `IEntitySelector.c`
+                *
+                * Make sure the inventory selector stays in sync.
+                * It should be the one that checks `var1 instanceof IInventory && var1.isAlive()`
+                */
+                if (p_177414_4_ == net.minecraft.util.EntitySelectors.HAS_INVENTORY && inventoryEntityCounts[k] <= 0) continue;
+                // Paper end
                 for (Entity entity1 : this.entityLists[k]) {
                     if (entity1.getEntityBoundingBox().intersectsWith(aabb) && entity1 != entityIn) {
                         if (p_177414_4_ == null || p_177414_4_.apply(entity1)) {
@@ -911,7 +939,19 @@ public class Chunk {
         i = MathHelper.clamp(i, 0, this.entityLists.length - 1);
         j = MathHelper.clamp(j, 0, this.entityLists.length - 1);
 
+        // Paper start
+        int[] counts;
+        if (net.minecraft.entity.item.EntityItem.class.isAssignableFrom(entityClass)) {
+            counts = itemCounts;
+        } else if (IInventory.class.isAssignableFrom(entityClass)) {
+            counts = inventoryEntityCounts;
+        } else {
+            counts = null;
+        }
+        // Paper end
+
         for (int k = i; k <= j; ++k) {
+            if (counts != null && counts[k] <= 0) continue; // Paper - Don't check a chunk if it doesn't have the type we are looking for
             for (Entity entity : this.entityLists[k]) {
                 if (entityClass.isInstance(entity) && entity.getEntityBoundingBox().intersectsWith(aabb) && (filter == null || filter.apply((T) entity))) { // Paper - fix decompile
                     listToFill.add((T) entity); // Paper - fix decompile
-- 
2.12.1.windows.1

