From 608695ecbbf0da0ef2e03aa1f76eab251865dd73 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach.brown@destroystokyo.com>
Date: Sun, 9 Apr 2017 02:36:52 -0500
Subject: [PATCH] Player Tab List and Title APIs


diff --git a/src/main/java/net/minecraft/network/play/server/SPacketPlayerListHeaderFooter.java b/src/main/java/net/minecraft/network/play/server/SPacketPlayerListHeaderFooter.java
index 2730895..df914c4 100644
--- a/src/main/java/net/minecraft/network/play/server/SPacketPlayerListHeaderFooter.java
+++ b/src/main/java/net/minecraft/network/play/server/SPacketPlayerListHeaderFooter.java
@@ -9,6 +9,7 @@ import net.minecraft.util.text.ITextComponent;
 public class SPacketPlayerListHeaderFooter implements Packet<INetHandlerPlayClient> {
     private ITextComponent header;
     private ITextComponent footer;
+    public net.md_5.bungee.api.chat.BaseComponent[] bHeader, bFooter; // Paper
 
     public SPacketPlayerListHeaderFooter() {
     }
@@ -29,8 +30,19 @@ public class SPacketPlayerListHeaderFooter implements Packet<INetHandlerPlayClie
      * Writes the raw packet data to the data stream.
      */
     public void writePacketData(PacketBuffer buf) throws IOException {
-        buf.writeTextComponent(this.header);
-        buf.writeTextComponent(this.footer);
+        // Paper start
+        if (this.bHeader != null) {
+            buf.writeString(net.md_5.bungee.chat.ComponentSerializer.toString(this.bHeader));
+        } else {
+            buf.writeTextComponent(this.header);
+        }
+
+        if (this.bFooter != null) {
+            buf.writeString(net.md_5.bungee.chat.ComponentSerializer.toString(this.bFooter));
+        } else {
+            buf.writeTextComponent(this.footer);
+        }
+        // Paper end
     }
 
     /**
diff --git a/src/main/java/net/minecraft/network/play/server/SPacketTitle.java b/src/main/java/net/minecraft/network/play/server/SPacketTitle.java
index b203552..047914e 100644
--- a/src/main/java/net/minecraft/network/play/server/SPacketTitle.java
+++ b/src/main/java/net/minecraft/network/play/server/SPacketTitle.java
@@ -34,6 +34,18 @@ public class SPacketTitle implements Packet<INetHandlerPlayClient> {
         this.fadeOutTime = fadeOutTimeIn;
     }
 
+    // Paper start
+    public net.md_5.bungee.api.chat.BaseComponent[] components;
+
+    public SPacketTitle(SPacketTitle.Type typeIn, net.md_5.bungee.api.chat.BaseComponent[] components, int fadeInTimeIn, int displayTimeIn, int fadeOutTimeIn) {
+        this.type = typeIn;
+        this.components = components;
+        this.fadeInTime = fadeInTimeIn;
+        this.displayTime = displayTimeIn;
+        this.fadeOutTime = fadeOutTimeIn;
+    }
+    // Paper end
+
     /**
      * Reads the raw packet data from the data stream.
      */
@@ -58,7 +70,13 @@ public class SPacketTitle implements Packet<INetHandlerPlayClient> {
         buf.writeEnumValue(this.type);
 
         if (this.type == SPacketTitle.Type.TITLE || this.type == SPacketTitle.Type.SUBTITLE || this.type == SPacketTitle.Type.ACTIONBAR) {
-            buf.writeTextComponent(this.message);
+            // Paper start
+            if (this.components != null) {
+                buf.writeString(net.md_5.bungee.chat.ComponentSerializer.toString(components));
+            } else {
+                buf.writeTextComponent(this.message);
+            }
+            // Paper end
         }
 
         if (this.type == SPacketTitle.Type.TIMES) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 61f560a..7c9fb0b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.destroystokyo.paper.Title;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
@@ -38,25 +39,14 @@ import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.network.NetHandlerPlayServer;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
-import net.minecraft.network.play.server.SPacketBlockChange;
-import net.minecraft.network.play.server.SPacketChat;
-import net.minecraft.network.play.server.SPacketCustomPayload;
-import net.minecraft.network.play.server.SPacketCustomSound;
-import net.minecraft.network.play.server.SPacketEffect;
-import net.minecraft.network.play.server.SPacketEntityProperties;
-import net.minecraft.network.play.server.SPacketMaps;
-import net.minecraft.network.play.server.SPacketParticles;
-import net.minecraft.network.play.server.SPacketPlayerListItem;
-import net.minecraft.network.play.server.SPacketSoundEffect;
-import net.minecraft.network.play.server.SPacketSpawnPosition;
-import net.minecraft.network.play.server.SPacketTitle;
-import net.minecraft.network.play.server.SPacketUpdateHealth;
+import net.minecraft.network.play.server.*;
 import net.minecraft.stats.StatBase;
 import net.minecraft.tileentity.TileEntitySign;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.SoundCategory;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.text.ITextComponent;
+import net.minecraft.util.text.TextComponentString;
 import net.minecraft.util.text.TextFormatting;
 import net.minecraft.world.GameType;
 import net.minecraft.world.WorldServer;
@@ -294,6 +284,84 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    // Paper start
+    @Override
+    public void setPlayerListHeaderFooter(BaseComponent[] header, BaseComponent[] footer) {
+        SPacketPlayerListHeaderFooter packet = new SPacketPlayerListHeaderFooter();
+        packet.bHeader = header;
+        packet.bFooter = footer;
+        getHandle().connection.sendPacket(packet);
+    }
+
+    @Override
+    public void setPlayerListHeaderFooter(BaseComponent header, BaseComponent footer) {
+        this.setPlayerListHeaderFooter(header == null ? null : new BaseComponent[]{header},
+                footer == null ? null : new BaseComponent[]{footer});
+    }
+
+    @Override
+    public void setTitleTimes(int fadeInTicks, int stayTicks, int fadeOutTicks) {
+        getHandle().connection.sendPacket(new SPacketTitle(SPacketTitle.Type.TIMES, (BaseComponent[]) null, fadeInTicks, stayTicks, fadeOutTicks));
+    }
+
+    @Override
+    public void setSubtitle(BaseComponent[] subtitle) {
+        getHandle().connection.sendPacket(new SPacketTitle(SPacketTitle.Type.SUBTITLE, subtitle, 0, 0, 0));
+    }
+
+    @Override
+    public void setSubtitle(BaseComponent subtitle) {
+        setSubtitle(new BaseComponent[]{subtitle});
+    }
+
+    @Override
+    public void showTitle(BaseComponent[] title) {
+        getHandle().connection.sendPacket(new SPacketTitle(SPacketTitle.Type.TITLE, title, 0, 0, 0));
+    }
+
+    @Override
+    public void showTitle(BaseComponent title) {
+        showTitle(new BaseComponent[]{title});
+    }
+
+    @Override
+    public void showTitle(BaseComponent[] title, BaseComponent[] subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks) {
+        setTitleTimes(fadeInTicks, stayTicks, fadeOutTicks);
+        setSubtitle(subtitle);
+        showTitle(title);
+    }
+
+    @Override
+    public void showTitle(BaseComponent title, BaseComponent subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks) {
+        setTitleTimes(fadeInTicks, stayTicks, fadeOutTicks);
+        setSubtitle(subtitle);
+        showTitle(title);
+    }
+
+    @Override
+    public void sendTitle(Title title) {
+        Preconditions.checkNotNull(title, "Title is null");
+        setTitleTimes(title.getFadeIn(), title.getStay(), title.getFadeOut());
+        setSubtitle(title.getSubtitle() == null ? new BaseComponent[0] : title.getSubtitle());
+        showTitle(title.getTitle());
+    }
+
+    @Override
+    public void updateTitle(Title title) {
+        Preconditions.checkNotNull(title, "Title is null");
+        setTitleTimes(title.getFadeIn(), title.getStay(), title.getFadeOut());
+        if (title.getSubtitle() != null) {
+            setSubtitle(title.getSubtitle());
+        }
+        showTitle(title.getTitle());
+    }
+
+    @Override
+    public void hideTitle() {
+        getHandle().connection.sendPacket(new SPacketTitle(SPacketTitle.Type.CLEAR, (BaseComponent[]) null, 0, 0, 0));
+    }
+    // Paper end
+
     public String getDisplayName() {
         return this.getHandle().displayName;
     }
-- 
2.12.1.windows.1

