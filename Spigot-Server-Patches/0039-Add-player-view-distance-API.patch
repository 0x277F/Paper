From 2a697c9256f38b9bb9929dfe5ff8cf31b4f9550b Mon Sep 17 00:00:00 2001
From: Zach Brown <zach.brown@destroystokyo.com>
Date: Sat, 8 Apr 2017 22:49:40 -0500
Subject: [PATCH] Add player view distance API


diff --git a/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java b/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java
index 04e3fd6..6b987a5 100644
--- a/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java
+++ b/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java
@@ -195,6 +195,17 @@ public class EntityPlayerMP extends EntityPlayer implements IContainerListener {
     public WeatherType weather = null;
     private float pluginRainPosition;
     private float pluginRainPositionPrevious;
+    // Paper start - Player view distance API
+    private int viewDistance = -1;
+    
+    public int getViewDistance() {
+        return viewDistance == -1 ? ((WorldServer) world).getPlayerChunkMap().playerViewRadius : viewDistance;
+    }
+    
+    public void setViewDistance(int viewDistance) {
+        this.viewDistance = viewDistance;
+    }
+    // Paper end
 
     public EntityPlayerMP(MinecraftServer server, WorldServer worldIn, GameProfile profile, PlayerInteractionManager interactionManagerIn) {
         super(worldIn, profile);
diff --git a/src/main/java/net/minecraft/server/management/PlayerChunkMap.java b/src/main/java/net/minecraft/server/management/PlayerChunkMap.java
index 5e8bcec..9fe74e1 100644
--- a/src/main/java/net/minecraft/server/management/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/management/PlayerChunkMap.java
@@ -280,8 +280,11 @@ public class PlayerChunkMap {
         player.managedPosZ = player.posZ;
         List<ChunkPos> chunkList = new LinkedList();
 
-        for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k) {
-            for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l) {
+        // Paper start - Player view distance API
+        int viewDistance = player.getViewDistance();
+        for (int k = i - viewDistance; k <= i + viewDistance; ++k) {
+            for (int l = j - viewDistance; l <= j + viewDistance; ++l) {
+                // Paper end
                 chunkList.add(new ChunkPos(k, l));
             }
         }
@@ -303,8 +306,11 @@ public class PlayerChunkMap {
         int i = (int)player.managedPosX >> 4;
         int j = (int)player.managedPosZ >> 4;
 
-        for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k) {
-            for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l) {
+        // Paper start - Player view distance API
+        int viewDistance = player.getViewDistance();
+        for (int k = i - viewDistance; k <= i + viewDistance; ++k) {
+            for (int l = j - viewDistance; l <= j + viewDistance; ++l) {
+                // Paper end
                 PlayerChunkMapEntry playerchunk = this.getEntry(k, l);
 
                 if (playerchunk != null) {
@@ -340,7 +346,10 @@ public class PlayerChunkMap {
         if (d2 >= 64.0D) {
             int k = (int)player.managedPosX >> 4;
             int l = (int)player.managedPosZ >> 4;
-            int i1 = this.playerViewRadius;
+            // Paper start - Player view distance API
+            final int viewDistance = player.getViewDistance();
+            int i1 = Math.max(playerViewRadius, viewDistance);
+            // Paper end
             int j1 = i - k;
             int k1 = j - l;
             List<ChunkPos> chunksToLoad = new LinkedList();
@@ -348,7 +357,7 @@ public class PlayerChunkMap {
             if (j1 != 0 || k1 != 0) {
                 for (int l1 = i - i1; l1 <= i + i1; ++l1) {
                     for (int i2 = j - i1; i2 <= j + i1; ++i2) {
-                        if (!this.overlaps(l1, i2, k, l, i1)) {
+                        if (!this.overlaps(l1, i2, k, l, viewDistance)) { // Paper - Player view distance API
                             chunksToLoad.add(new ChunkPos(l1, i2));
                         }
 
@@ -386,32 +395,41 @@ public class PlayerChunkMap {
             int j = radius - this.playerViewRadius;
 
             for (EntityPlayerMP entityplayer : Lists.newArrayList(this.players)) {
-                int k = (int)entityplayer.posX >> 4;
-                int l = (int)entityplayer.posZ >> 4;
+                setPlayerViewRadius(entityplayer, radius); // Paper - View distance API, split into separate method
+            }
 
-                if (j > 0) {
-                    for (int i1 = k - radius; i1 <= k + radius; ++i1) {
-                        for (int j1 = l - radius; j1 <= l + radius; ++j1) {
-                            PlayerChunkMapEntry playerchunk = this.getOrCreateEntry(i1, j1);
+            this.playerViewRadius = radius;
+            this.markSortPending();
+        }
+    }
 
-                            if (!playerchunk.containsPlayer(entityplayer)) {
-                                playerchunk.addPlayer(entityplayer);
-                            }
-                        }
+    // Paper start - Player view distance API, split from above with minor changes
+    private void setPlayerViewRadius(EntityPlayerMP entityplayer, int radius) {
+        radius = MathHelper.clamp(radius, 3, 32);
+        int oldViewDistance = entityplayer.getViewDistance();
+        if (radius == oldViewDistance) return;
+        int k = (int)entityplayer.posX >> 4;
+        int l = (int)entityplayer.posZ >> 4;
+        int j = radius - oldViewDistance;
+
+        if (j > 0) {
+            for (int i1 = k - radius; i1 <= k + radius; ++i1) {
+                for (int j1 = l - radius; j1 <= l + radius; ++j1) {
+                    PlayerChunkMapEntry playerchunk = this.getOrCreateEntry(i1, j1);
+
+                    if (!playerchunk.containsPlayer(entityplayer)) {
+                        playerchunk.addPlayer(entityplayer);
                     }
-                } else {
-                    for (int i1 = k - this.playerViewRadius; i1 <= k + this.playerViewRadius; ++i1) {
-                        for (int j1 = l - this.playerViewRadius; j1 <= l + this.playerViewRadius; ++j1) {
-                            if (!this.overlaps(i1, j1, k, l, radius)) {
-                                this.getOrCreateEntry(i1, j1).removePlayer(entityplayer);
-                            }
-                        }
+                }
+            }
+        } else {
+            for (int i1 = k - oldViewDistance; i1 <= k + oldViewDistance; ++i1) {
+                for (int j1 = l - oldViewDistance; j1 <= l + oldViewDistance; ++j1) {
+                    if (!this.overlaps(i1, j1, k, l, radius)) {
+                        this.getOrCreateEntry(i1, j1).removePlayer(entityplayer);
                     }
                 }
             }
-
-            this.playerViewRadius = radius;
-            this.markSortPending();
         }
     }
 
@@ -453,6 +471,23 @@ public class PlayerChunkMap {
             this.getWorldServer().getChunkProvider().queueUnload(chunk);
         }
     }
+    
+    // Paper start - Player view distance API
+    public void updateViewRadius(EntityPlayerMP player, int toSet) {
+        int oldViewDistance = player.getViewDistance();
+
+        int viewDistance = MathHelper.clamp(toSet, 3, 32);
+        if (toSet < 0) {
+            viewDistance = -1;
+        }
+        
+        if (viewDistance != oldViewDistance) {
+            // Order matters
+            this.setPlayerViewRadius(player, viewDistance);
+            this.markSortPending();
+            player.setViewDistance(viewDistance);
+        }
+    }
 
     private static class ChunkCoordComparator implements Comparator<ChunkPos> {
         private int x;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 2e03cd7..65a3efc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1424,6 +1424,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public boolean getAffectsSpawning() {
         return this.getHandle().affectsSpawning;
     }
+    
+    @Override
+    public int getViewDistance() {
+        return this.getHandle().getViewDistance();
+    }
+    
+    @Override
+    public void setViewDistance(int viewDistance) {
+        this.getHandle().getServerWorld().getPlayerChunkMap().updateViewRadius(this.getHandle(), viewDistance);
+    }
     // Paper end
 
     public Player.Spigot spigot() { // Paper - fix decompile
-- 
2.12.1.windows.1

