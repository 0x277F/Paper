From 0657cb386dd07761c95705cc3a8ba76317fc0bf5 Mon Sep 17 00:00:00 2001
From: Byteflux <byte@byteflux.net>
Date: Wed, 2 Mar 2016 00:52:31 -0600
Subject: [PATCH] Lighting Queue

This provides option to queue lighting updates to ensure they do not cause the server lag

diff --git a/src/main/java/co/aikar/timings/WorldTimingsHandler.java b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
index bef7ad8..4eda2d8 100644
--- a/src/main/java/co/aikar/timings/WorldTimingsHandler.java
+++ b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
@@ -15,6 +15,7 @@ public class WorldTimingsHandler {
     public final Timing scheduledBlocksTicking;
     public final Timing chunkTicks;
     public final Timing lightChunk;
+    public final Timing lightingQueue; // Added as part of LightingQueue Patch
     public final Timing chunkTicksBlocks;
     public final Timing doVillages;
     public final Timing doChunkMap;
@@ -61,6 +62,7 @@ public class WorldTimingsHandler {
         scheduledBlocksTicking = Timings.ofSafe(name + "Scheduled Blocks - Ticking");
         chunkTicks = Timings.ofSafe(name + "Chunk Ticks");
         lightChunk = Timings.ofSafe(name + "Light Chunk");
+        lightingQueue = Timings.ofSafe(name + "Lighting Queue"); // Added as part of Lighting Queue Patch
         chunkTicksBlocks = Timings.ofSafe(name + "Chunk Ticks - Blocks");
         doVillages = Timings.ofSafe(name + "doVillages");
         doChunkMap = Timings.ofSafe(name + "doChunkMap");
diff --git a/src/main/java/com/destroystokyo/paper/PaperLightingQueue.java b/src/main/java/com/destroystokyo/paper/PaperLightingQueue.java
new file mode 100644
index 0000000..1d669e9
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/PaperLightingQueue.java
@@ -0,0 +1,106 @@
+package com.destroystokyo.paper;
+
+
+import co.aikar.timings.Timing;
+import it.unimi.dsi.fastutil.objects.ObjectCollection;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.World;
+import net.minecraft.world.WorldServer;
+import net.minecraft.world.chunk.Chunk;
+
+import java.util.ArrayDeque;
+
+public class PaperLightingQueue {
+    private static final long MAX_TIME = (long) (1000000000 / 20 * .95);
+    private static int updatesThisTick;
+
+
+    public static void processQueue(long curTime) {
+        updatesThisTick = 0;
+
+        final long startTime = System.nanoTime();
+        final long maxTickTime = MAX_TIME - (startTime - curTime);
+
+        START:
+        for (World world : MinecraftServer.getServer().worlds) {
+            if (!world.paperConfig.queueLightUpdates) {
+                continue;
+            }
+
+            ObjectCollection<Chunk> loadedChunks = ((WorldServer) world).getChunkProvider().id2ChunkMap.values();
+            for (Chunk chunk : loadedChunks.toArray(new Chunk[loadedChunks.size()])) {
+                if (chunk.lightingQueue.processQueue(startTime, maxTickTime)) {
+                    break START;
+                }
+            }
+        }
+    }
+
+    public static class LightingQueue extends ArrayDeque<Runnable> {
+        final private Chunk chunk;
+
+        public LightingQueue(Chunk chunk) {
+            super();
+            this.chunk = chunk;
+        }
+
+        @Override
+        public boolean add(Runnable runnable) {
+            if (chunk.world.paperConfig.queueLightUpdates) {
+                return super.add(runnable);
+            }
+            runnable.run();
+            return true;
+        }
+
+        /**
+         * Processes the lighting queue for this chunk
+         *
+         * @param startTime   If start Time is 0, we will not limit execution time
+         * @param maxTickTime Maximum time to spend processing lighting updates
+         * @return true to abort processing furthur lighting updates
+         */
+        private boolean processQueue(long startTime, long maxTickTime) {
+            if (this.isEmpty()) {
+                return false;
+            }
+            try (Timing ignored = chunk.world.timings.lightingQueue.startTiming()) {
+                Runnable lightUpdate;
+                while ((lightUpdate = this.poll()) != null) {
+                    lightUpdate.run();
+                    if (startTime > 0 && ++PaperLightingQueue.updatesThisTick % 10 == 0 && PaperLightingQueue.updatesThisTick > 10) {
+                        if (System.nanoTime() - startTime > maxTickTime) {
+                            return true;
+                        }
+                    }
+                }
+            }
+
+            return false;
+        }
+
+        /**
+         * Flushes lighting updates to unload the chunk
+         */
+        public void processUnload() {
+            if (!chunk.world.paperConfig.queueLightUpdates) {
+                return;
+            }
+            processQueue(0, 0); // No timeout
+
+            final int radius = 1;
+            for (int x = chunk.xPosition - radius; x <= chunk.xPosition + radius; ++x) {
+                for (int z = chunk.zPosition - radius; z <= chunk.zPosition + radius; ++z) {
+                    if (x == chunk.xPosition && z == chunk.zPosition) {
+                        continue;
+                    }
+
+                    Chunk neighbor = MCUtil.getLoadedChunkWithoutMarkingActive(chunk.world, x, z);
+                    if (neighbor != null) {
+                        neighbor.lightingQueue.processQueue(0, 0); // No timeout
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 951e128..bf9cd17 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -141,4 +141,10 @@ public class PaperWorldConfig {
     private void netherVoidTopDamage() {
         netherVoidTopDamage = getBoolean("nether-ceiling-void-damage", false);
     }
+
+    public boolean queueLightUpdates;
+    private void queueLightUpdates() {
+        queueLightUpdates = getBoolean("queue-light-updates", false);
+        log("Lighting Queue enabled: " + queueLightUpdates);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b8d9566..5405909 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import co.aikar.timings.MinecraftTimings; // Paper
+import com.destroystokyo.paper.PaperLightingQueue;
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
 import com.google.common.io.Files;
@@ -844,6 +845,7 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
         this.profiler.endSection();
         this.profiler.endSection();
         WatchdogThread.tick();
+        PaperLightingQueue.processQueue(i); // Paper
         this.slackActivityAccountant.tickEnded(tickNanos);
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
     }
diff --git a/src/main/java/net/minecraft/world/World.java b/src/main/java/net/minecraft/world/World.java
index 5022191..2af01da 100644
--- a/src/main/java/net/minecraft/world/World.java
+++ b/src/main/java/net/minecraft/world/World.java
@@ -473,7 +473,7 @@ public abstract class World implements IBlockAccess {
             } else {
                 if (newState.getLightOpacity() != iblockdata1.getLightOpacity() || newState.getLightValue() != iblockdata1.getLightValue()) {
                     this.profiler.startSection("checkLight");
-                    this.checkLight(pos);
+                    chunk.lightingQueue.add(() -> this.checkLight(pos)); // Paper - Queue light updates
                     this.profiler.endSection();
                 }
 
diff --git a/src/main/java/net/minecraft/world/chunk/Chunk.java b/src/main/java/net/minecraft/world/chunk/Chunk.java
index 2b8a24a..ffb2af0 100644
--- a/src/main/java/net/minecraft/world/chunk/Chunk.java
+++ b/src/main/java/net/minecraft/world/chunk/Chunk.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.chunk;
 
+import com.destroystokyo.paper.PaperLightingQueue; // Paper
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -105,6 +106,7 @@ public class Chunk {
     public long chunkKey;
     public org.bukkit.Chunk bukkitChunk;
     public boolean mustSave;
+    public final PaperLightingQueue.LightingQueue lightingQueue = new PaperLightingQueue.LightingQueue(this); // Paper
 
     public boolean areNeighborsLoaded(int radius) {
         switch (radius) {
@@ -290,6 +292,14 @@ public class Chunk {
         this.world.profiler.startSection("recheckGaps");
 
         if (this.world.isAreaLoaded(new BlockPos(this.xPosition * 16 + 8, 0, this.zPosition * 16 + 8), 16)) {
+            // Paper start - Queue light updates
+            lightingQueue.add(() -> doCheckGaps(onlyOne));
+        }
+    }
+
+    private void doCheckGaps(boolean onlyOne) {
+        if (true) {
+            // Paper end
             for (int i = 0; i < 16; ++i) {
                 for (int j = 0; j < 16; ++j) {
                     if (this.updateSkylightColumns[i + j * 16]) {
@@ -536,7 +546,7 @@ public class Chunk {
             } else {
                 if (flag) {
                     this.generateSkylightMap();
-                } else {
+                } else { lightingQueue.add(() -> { // Paper - Queue light updates
                     int j1 = state.getLightOpacity();
                     int k1 = iblockdata1.getLightOpacity();
 
@@ -551,6 +561,7 @@ public class Chunk {
                     if (j1 != k1 && (j1 < k1 || this.getLightFor(EnumSkyBlock.SKY, pos) > 0 || this.getLightFor(EnumSkyBlock.BLOCK, pos) > 0)) {
                         this.propagateSkylightOcclusion(i, k);
                     }
+                    }); // Paper
                 }
 
                 if (block1 instanceof ITileEntityProvider) {
diff --git a/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java b/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
index 42cc698..39ded54 100644
--- a/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
@@ -297,6 +297,7 @@ public class ChunkProviderServer implements IChunkProvider {
             return false;
         } else {
             save = event.isSaveChunk();
+            chunk.lightingQueue.processUnload(); // Paper
 
             for (int x = -2; x < 3; ++x) {
                 for (int z = -2; z < 3; ++z) {
-- 
2.12.1.windows.1

