From c8bd82b9ef58f7dfb5d013cfbbf325de0efd092c Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 1 Mar 2016 23:09:29 -0600
Subject: [PATCH] Further improve server tick loop

Improves how the catchup buffer is handled, allowing it to roll both ways
increasing the effeciency of the thread sleep so it only will sleep once.

Also increases the buffer of the catchup to ensure server stays at 20 TPS unless extreme conditions

Previous implementation did not calculate TPS correctly.
Switch to a realistic rolling average and factor in std deviation as an extra reporting variable

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index c33b844..b8d9566 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -189,14 +189,10 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
     public ConsoleCommandSender console;
     public RemoteConsoleCommandSender remoteConsole;
     public ConsoleReader reader;
-    public static int currentTick = (int)(System.currentTimeMillis() / 50L);
+    public static int currentTick = 0; // Paper - Further improve tick loop
     public final Thread primaryThread;
     public Queue<Runnable> processQueue = new ConcurrentLinkedQueue();
     public int autosavePeriod;
-    public static final int TPS = 20;
-    public static final int TICK_TIME = 50000000;
-    private static final int SAMPLE_INTERVAL = 100;
-    public final double[] recentTps = new double[3];
     public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
     private boolean hasStopped = false;
     private final Object stopLock = new Object();
@@ -599,9 +595,54 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
         this.serverRunning = false;
     }
 
-    private static double calcTps(double avg, double exp, double tps) {
-        return avg * exp + tps * (1.0D - exp);
+    // Paper start - Further improve server tick loop
+    private static final int TPS = 20;
+    private static final long SEC_IN_NANO = 1000000000;
+    public static final long TICK_TIME = SEC_IN_NANO / TPS;
+    private static final long MAX_CATCHUP_BUFFER = TICK_TIME * TPS * 60L;
+    private static final int SAMPLE_INTERVAL = 20;
+    public final RollingAverage tps1 = new RollingAverage(60);
+    public final RollingAverage tps5 = new RollingAverage(60 * 5);
+    public final RollingAverage tps15 = new RollingAverage(60 * 15);
+    public double[] recentTps = new double[3]; // Paper - Fine have your darn compat with bad plugins
+
+    public static class RollingAverage {
+        private final int size;
+        private long time;
+        private double total;
+        private int index = 0;
+        private final double[] samples;
+        private final long[] times;
+
+        RollingAverage(int size) {
+            this.size = size;
+            this.time = size * SEC_IN_NANO;
+            this.total = TPS * SEC_IN_NANO * size;
+            this.samples = new double[size];
+            this.times = new long[size];
+            for (int i = 0; i < size; i++) {
+                this.samples[i] = TPS;
+                this.times[i] = SEC_IN_NANO;
+            }
+        }
+
+        public void add(double x, long t) {
+            time -= times[index];
+            total -= samples[index] * times[index];
+            samples[index] = x;
+            times[index] = t;
+            time += t;
+            total += x * t;
+            if (++index == size) {
+                index = 0;
+            }
+        }
+
+        public double getAverage() {
+            return total / time;
+        }
     }
+    // Paper end
 
     public void run() {
         try {
@@ -612,32 +653,47 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
                 this.statusResponse.setVersion(new ServerStatusResponse.Version("1.11.2", 316));
                 this.applyServerIconToResponse(this.statusResponse);
                 Arrays.fill(this.recentTps, 20.0D);
-                long lastTick = System.nanoTime();
-                long catchupTime = 0L;
-                long tickSection = lastTick;
+                long start = System.nanoTime(), lastTick = start - TICK_TIME, catchupTime = 0, curTime, wait, tickSection = start; // Paper - Further improve server tick loop
 
                 while (this.serverRunning) {
-                    long curTime = System.nanoTime();
-                    long wait = 50000000L - (curTime - lastTick) - catchupTime;
-
-                    if (wait > 0L) {
-                        Thread.sleep(wait / 1000000L);
-                        catchupTime = 0L;
-                    } else {
-                        catchupTime = Math.min(1000000000L, Math.abs(wait));
-
-                        if (currentTick++ % 100 == 0) {
-                            double currentTps = 1.0E9D / (double)(curTime - tickSection) * 100.0D;
-                            this.recentTps[0] = calcTps(this.recentTps[0], 0.92D, currentTps);
-                            this.recentTps[1] = calcTps(this.recentTps[1], 0.9835D, currentTps);
-                            this.recentTps[2] = calcTps(this.recentTps[2], 0.9945D, currentTps);
-                            tickSection = curTime;
+                    // Paper start - Further improve server tick loop
+                    curTime = System.nanoTime();
+                    wait = TICK_TIME - (curTime - lastTick);
+                    if (wait > 0) {
+                        if (catchupTime < 2E6) {
+                            wait += Math.abs(catchupTime);
+                        } else if (wait < catchupTime) {
+                            catchupTime -= wait;
+                            wait = 0;
+                        } else {
+                            wait -= catchupTime;
+                            catchupTime = 0;
                         }
+                    }
+                    if (wait > 0) {
+                        Thread.sleep(wait / 1000000);
+                        curTime = System.nanoTime();
+                        wait = TICK_TIME - (curTime - lastTick);
+                    }
 
-                        lastTick = curTime;
-                        this.tick();
-                        this.serverIsRunning = true;
+                    catchupTime = Math.min(MAX_CATCHUP_BUFFER, catchupTime - wait);
+                    if ( ++MinecraftServer.currentTick % SAMPLE_INTERVAL == 0 ) {
+                        final long diff = curTime - tickSection;
+                        double currentTps = 1E9 / diff * SAMPLE_INTERVAL;
+                        tps1.add(currentTps, diff);
+                        tps5.add(currentTps, diff);
+                        tps15.add(currentTps, diff);
+                        // Backwards compat with bad plugins
+                        recentTps[0] = tps1.getAverage();
+                        recentTps[1] = tps5.getAverage();
+                        recentTps[2] = tps15.getAverage();
+                        // Paper end
+                        tickSection = curTime;
                     }
+                    lastTick = curTime;
+
+                    this.tick();
+                    this.serverIsRunning = true;
                 }
             } else {
                 this.finalTick((CrashReport)null);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 1985155..c22b5d2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1690,6 +1690,17 @@ public final class CraftServer implements Server {
         return CraftMagicNumbers.INSTANCE;
     }
 
+    // Paper start - Expose server TPS
+    @Override
+    public double[] getTPS() {
+        return new double[] {
+                MinecraftServer.getServer().tps1.getAverage(),
+                MinecraftServer.getServer().tps5.getAverage(),
+                MinecraftServer.getServer().tps15.getAverage(),
+        };
+    }
+    // Paper end
+
     public Spigot spigot() {
         return this.spigot;
     }
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index e5abd99..b857dbf 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -19,12 +19,15 @@ public class TicksPerSecondCommand extends Command {
         } else {
             StringBuilder sb = new StringBuilder(ChatColor.GOLD + "TPS from last 1m, 5m, 15m: ");
 
-            for (double tps : MinecraftServer.getServer().recentTps) {
-                sb.append(this.format(tps));
-                sb.append(", ");
+            // Paper start - Further improve tick handling
+            double[] tps = org.bukkit.Bukkit.getTPS();
+            String[] tpsAvg = new String[tps.length];
+
+            for ( int i = 0; i < tps.length; i++) {
+                tpsAvg[i] = format( tps[i] );
             }
 
-            sender.sendMessage(sb.substring(0, sb.length() - 2));
+            sender.sendMessage( ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", "));
             return true;
         }
     }
-- 
2.9.3

