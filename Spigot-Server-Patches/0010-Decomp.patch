From 43cbe861f3355e0b591422603359e907e7b94f3e Mon Sep 17 00:00:00 2001
From: DemonWav <demonwav@gmail.com>
Date: Mon, 3 Apr 2017 00:18:59 -0500
Subject: [PATCH] Decomp


diff --git a/src/main/java/net/minecraft/block/BlockSponge.java b/src/main/java/net/minecraft/block/BlockSponge.java
index f538965..7a8f66b 100644
--- a/src/main/java/net/minecraft/block/BlockSponge.java
+++ b/src/main/java/net/minecraft/block/BlockSponge.java
@@ -66,7 +66,7 @@ public class BlockSponge extends Block {
 
     private boolean absorb(World worldIn, BlockPos pos) {
         LinkedList var3 = Lists.newLinkedList();
-        ArrayList var4 = Lists.newArrayList();
+        ArrayList<BlockPos> var4 = Lists.newArrayList(); // Paper - fix decompile
         var3.add(new Tuple(pos, Integer.valueOf(0)));
         int var5 = 0;
 
@@ -118,4 +118,4 @@ public class BlockSponge extends Block {
     protected BlockStateContainer createBlockState() {
         return new BlockStateContainer(this, new IProperty[] {WET});
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/block/BlockTripWire.java b/src/main/java/net/minecraft/block/BlockTripWire.java
index f7d03ed..f38bf79 100644
--- a/src/main/java/net/minecraft/block/BlockTripWire.java
+++ b/src/main/java/net/minecraft/block/BlockTripWire.java
@@ -152,7 +152,7 @@ public class BlockTripWire extends Block {
         IBlockState iblockdata = worldIn.getBlockState(pos);
         boolean flag = ((Boolean)iblockdata.getValue(POWERED)).booleanValue();
         boolean flag1 = false;
-        List list = worldIn.getEntitiesWithinAABBExcludingEntity((Entity)null, iblockdata.getBoundingBox(worldIn, pos).offset(pos));
+        List<Entity> list = worldIn.getEntitiesWithinAABBExcludingEntity((Entity)null, iblockdata.getBoundingBox(worldIn, pos).offset(pos)); // Paper - fix decompile
 
         if (!list.isEmpty()) {
             for (Entity entity : list) {
@@ -293,4 +293,4 @@ public class BlockTripWire extends Block {
     protected BlockStateContainer createBlockState() {
         return new BlockStateContainer(this, new IProperty[] {POWERED, ATTACHED, DISARMED, NORTH, EAST, WEST, SOUTH});
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/command/server/CommandAchievement.java b/src/main/java/net/minecraft/command/server/CommandAchievement.java
index 4b46b7b..13d70aa 100644
--- a/src/main/java/net/minecraft/command/server/CommandAchievement.java
+++ b/src/main/java/net/minecraft/command/server/CommandAchievement.java
@@ -79,7 +79,7 @@ public class CommandAchievement extends CommandBase {
                                     throw new CommandException("commands.achievement.alreadyHave", new Object[] {var5.getName(), var4.createChatComponent()});
                                 }
 
-                                ArrayList var9;
+                                ArrayList<Achievement> var9; // Paper - fix decompile
 
                                 for (var9 = Lists.newArrayList(); var8.parentAchievement != null && !var5.getStatFile().hasAchievementUnlocked(var8.parentAchievement); var8 = var8.parentAchievement) {
                                     var9.add(var8.parentAchievement);
@@ -93,12 +93,12 @@ public class CommandAchievement extends CommandBase {
                                     throw new CommandException("commands.achievement.dontHave", new Object[] {var5.getName(), var4.createChatComponent()});
                                 }
 
-                                ArrayList var17 = Lists.newArrayList(Iterators.filter(AchievementList.ACHIEVEMENTS.iterator(), new Predicate<Achievement>() {
+                                ArrayList<Achievement> var17 = Lists.newArrayList(Iterators.filter(AchievementList.ACHIEVEMENTS.iterator(), new Predicate<Achievement>() { // Paper - fix decompile
                                     public boolean apply(@Nullable Achievement var1) {
                                         return var5.getStatFile().hasAchievementUnlocked(var1) && var1 != var4;
                                     }
                                 }));
-                                ArrayList var20 = Lists.newArrayList(var17);
+                                ArrayList<Achievement> var20 = Lists.newArrayList(var17); // Paper - fix decompile
 
                                 for (Achievement var12 : var17) {
                                     Achievement var13 = var12;
@@ -164,4 +164,4 @@ public class CommandAchievement extends CommandBase {
     public boolean isUsernameIndex(String[] args, int index) {
         return index == 2;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/command/server/CommandScoreboard.java b/src/main/java/net/minecraft/command/server/CommandScoreboard.java
index 8481280..e004a45 100644
--- a/src/main/java/net/minecraft/command/server/CommandScoreboard.java
+++ b/src/main/java/net/minecraft/command/server/CommandScoreboard.java
@@ -238,7 +238,7 @@ public class CommandScoreboard extends CommandBase {
         if (var4 < 0) {
             return false;
         } else {
-            ArrayList var13 = Lists.newArrayList(this.getScoreboard(server).getObjectiveNames());
+            ArrayList<String> var13 = Lists.newArrayList(this.getScoreboard(server).getObjectiveNames()); // Paper - fix decompile
             String var6 = args[var4];
             ArrayList var7 = Lists.newArrayList();
 
@@ -472,7 +472,7 @@ public class CommandScoreboard extends CommandBase {
             sender.sendMessage(var8);
             sender.sendMessage(new TextComponentString(joinNiceString(var7.toArray())));
         } else {
-            Collection var10 = var5.getTeams();
+            Collection<ScorePlayerTeam> var10 = var5.getTeams(); // Paper - fix decompile
             sender.setCommandStat(CommandResultStats.Type.QUERY_RESULT, var10.size());
 
             if (var10.isEmpty()) {
@@ -593,7 +593,7 @@ public class CommandScoreboard extends CommandBase {
         ScorePlayerTeam var6 = this.convertToTeam(p_184917_2_[p_184917_3_], server);
 
         if (var6 != null) {
-            ArrayList var7 = Lists.newArrayList(var6.getMembershipCollection());
+            ArrayList<String> var7 = Lists.newArrayList(var6.getMembershipCollection()); // Paper - fix decompile
             sender.setCommandStat(CommandResultStats.Type.AFFECTED_ENTITIES, var7.size());
 
             if (var7.isEmpty()) {
@@ -617,7 +617,7 @@ public class CommandScoreboard extends CommandBase {
 
     protected void listObjectives(ICommandSender sender, MinecraftServer server) throws CommandException {
         Scoreboard var3 = this.getScoreboard(server);
-        Collection var4 = var3.getScoreObjectives();
+        Collection<ScoreObjective> var4 = var3.getScoreObjectives(); // Paper - fix decompile
 
         if (var4.isEmpty()) {
             throw new CommandException("commands.scoreboard.objectives.list.empty", new Object[0]);
@@ -660,7 +660,7 @@ public class CommandScoreboard extends CommandBase {
 
         if (p_184920_2_.length > p_184920_3_) {
             String var6 = getEntityName(server, sender, p_184920_2_[p_184920_3_]);
-            Map var7 = var5.getObjectivesForEntity(var6);
+            Map<ScoreObjective, Score> var7 = var5.getObjectivesForEntity(var6); // Paper - fix decompile
             sender.setCommandStat(CommandResultStats.Type.QUERY_RESULT, var7.size());
 
             if (var7.isEmpty()) {
@@ -1107,7 +1107,7 @@ public class CommandScoreboard extends CommandBase {
     }
 
     protected List<String> getObjectiveNames(boolean writableOnly, MinecraftServer server) {
-        Collection var3 = this.getScoreboard(server).getScoreObjectives();
+        Collection<ScoreObjective> var3 = this.getScoreboard(server).getScoreObjectives(); // Paper - fix decompile
         ArrayList var4 = Lists.newArrayList();
 
         for (ScoreObjective var6 : var3) {
@@ -1120,7 +1120,7 @@ public class CommandScoreboard extends CommandBase {
     }
 
     protected List<String> getTriggerNames(MinecraftServer server) {
-        Collection var2 = this.getScoreboard(server).getScoreObjectives();
+        Collection<ScoreObjective> var2 = this.getScoreboard(server).getScoreObjectives(); // Paper - fix decompile
         ArrayList var3 = Lists.newArrayList();
 
         for (ScoreObjective var5 : var2) {
@@ -1138,4 +1138,4 @@ public class CommandScoreboard extends CommandBase {
     public boolean isUsernameIndex(String[] args, int index) {
         return !"players".equalsIgnoreCase(args[0]) ? ("teams".equalsIgnoreCase(args[0]) ? index == 2 : false) : (args.length > 1 && "operation".equalsIgnoreCase(args[1]) ? index == 2 || index == 5 : index == 2);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index 0517f28..c0bbe47 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -182,35 +182,35 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
 
         switch (option) {
             case NAME_TAG_VISIBILITY:
-                this.team.setNameTagVisibility(net.minecraft.scoreboard.Team.values()[status.ordinal()]);
+                this.team.setNameTagVisibility(net.minecraft.scoreboard.Team.EnumVisible.values()[status.ordinal()]); // Paper - fix decompile
                 break;
             case DEATH_MESSAGE_VISIBILITY:
-                this.team.setDeathMessageVisibility(net.minecraft.scoreboard.Team.values()[status.ordinal()]);
+                this.team.setDeathMessageVisibility(net.minecraft.scoreboard.Team.EnumVisible.values()[status.ordinal()]); // Paper - fix decompile
                 break;
             case COLLISION_RULE:
-                this.team.setCollisionRule(net.minecraft.scoreboard.Team.values()[status.ordinal()]);
+                this.team.setCollisionRule(net.minecraft.scoreboard.Team.CollisionRule.values()[status.ordinal()]); // Paper - fix decompile
                 break;
             default:
                 throw new IllegalArgumentException("Unrecognised option " + option);
         }
     }
 
-    public static net.minecraft.scoreboard.Team bukkitToNotch(NameTagVisibility visibility) {
+    public static net.minecraft.scoreboard.Team.EnumVisible bukkitToNotch(NameTagVisibility visibility) { // Paper - fix decompile
         switch (visibility) {
             case ALWAYS:
-                return net.minecraft.scoreboard.Team.ALWAYS;
+                return net.minecraft.scoreboard.Team.EnumVisible.ALWAYS; // Paper - fix decompile
             case NEVER:
-                return net.minecraft.scoreboard.Team.NEVER;
+                return net.minecraft.scoreboard.Team.EnumVisible.NEVER; // Paper - fix decompile
             case HIDE_FOR_OTHER_TEAMS:
-                return net.minecraft.scoreboard.Team.HIDE_FOR_OTHER_TEAMS;
+                return net.minecraft.scoreboard.Team.EnumVisible.HIDE_FOR_OTHER_TEAMS; // Paper - fix decompile
             case HIDE_FOR_OWN_TEAM:
-                return net.minecraft.scoreboard.Team.HIDE_FOR_OWN_TEAM;
+                return net.minecraft.scoreboard.Team.EnumVisible.HIDE_FOR_OWN_TEAM; // Paper - fix decompile
             default:
                 throw new IllegalArgumentException("Unknown visibility level " + visibility);
         }
     }
 
-    public static NameTagVisibility notchToBukkit(net.minecraft.scoreboard.Team visibility) {
+    public static NameTagVisibility notchToBukkit(net.minecraft.scoreboard.Team.EnumVisible visibility) { // Paper - fix decompile
         switch (visibility) {
             case ALWAYS:
                 return NameTagVisibility.ALWAYS;
@@ -249,4 +249,4 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
             return this.team == other.team || this.team != null && this.team.equals(other.team);
         }
     }
-}
\ No newline at end of file
+}
-- 
2.12.1

